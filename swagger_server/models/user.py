# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, username: str=None, city: str=None, country: str=None, phone: str=None, bio: str=None, password: str=None, birthday: str=None, sex: str=None, email: str=None, image_url: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: int
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param city: The city of this User.  # noqa: E501
        :type city: str
        :param country: The country of this User.  # noqa: E501
        :type country: str
        :param phone: The phone of this User.  # noqa: E501
        :type phone: str
        :param bio: The bio of this User.  # noqa: E501
        :type bio: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param birthday: The birthday of this User.  # noqa: E501
        :type birthday: str
        :param sex: The sex of this User.  # noqa: E501
        :type sex: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param image_url: The image_url of this User.  # noqa: E501
        :type image_url: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'username': str,
            'city': str,
            'country': str,
            'phone': str,
            'bio': str,
            'password': str,
            'birthday': str,
            'sex': str,
            'email': str,
            'image_url': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'username': 'username',
            'city': 'city',
            'country': 'country',
            'phone': 'phone',
            'bio': 'bio',
            'password': 'password',
            'birthday': 'birthday',
            'sex': 'sex',
            'email': 'email',
            'image_url': 'image_url'
        }
        self._id = id
        self._name = name
        self._username = username
        self._city = city
        self._country = country
        self._phone = phone
        self._bio = bio
        self._password = password
        self._birthday = birthday
        self._sex = sex
        self._email = email
        self._image_url = image_url

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def city(self) -> str:
        """Gets the city of this User.


        :return: The city of this User.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this User.


        :param city: The city of this User.
        :type city: str
        """

        self._city = city

    @property
    def country(self) -> str:
        """Gets the country of this User.


        :return: The country of this User.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this User.


        :param country: The country of this User.
        :type country: str
        """

        self._country = country

    @property
    def phone(self) -> str:
        """Gets the phone of this User.


        :return: The phone of this User.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this User.


        :param phone: The phone of this User.
        :type phone: str
        """

        self._phone = phone

    @property
    def bio(self) -> str:
        """Gets the bio of this User.


        :return: The bio of this User.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio: str):
        """Sets the bio of this User.


        :param bio: The bio of this User.
        :type bio: str
        """

        self._bio = bio

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def birthday(self) -> str:
        """Gets the birthday of this User.


        :return: The birthday of this User.
        :rtype: str
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday: str):
        """Sets the birthday of this User.


        :param birthday: The birthday of this User.
        :type birthday: str
        """

        self._birthday = birthday

    @property
    def sex(self) -> str:
        """Gets the sex of this User.


        :return: The sex of this User.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex: str):
        """Sets the sex of this User.


        :param sex: The sex of this User.
        :type sex: str
        """

        self._sex = sex

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def image_url(self) -> str:
        """Gets the image_url of this User.


        :return: The image_url of this User.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: str):
        """Sets the image_url of this User.


        :param image_url: The image_url of this User.
        :type image_url: str
        """

        self._image_url = image_url
